FORMAT: 1A
HOST: http://hearthstone-srv.herokuapp.com/

# Hearthstone APIs

# Group User
User related resources of the **User API**

## Signup [/user/signup]
Create a user.

### Signup a user [POST]
+ Request (application/json)

        {
            name: "tim",
            pass: "123",
            email: "tang.jilong@gmail.com",
            avatar: "",
            deviceToken: "abc123"
        }

+ Response Success (application/json)

        {
            success: true,
            msg: 'Signup sucess!'
        }

+ Response Failure (application/json)

        {
            success: false,
            msg: 'User name must be 0-9,a-z,A-Z',
            name: 'tim',
            email:'tang.jilong@gmail.com'
        }        

+ Response Failure (application/json)

        {
            success: false,
            msg: 'User Name has been used.',
            name: 'tim',
            email:'tang.jilong@gmail.com'
        }        

+ Response Failure (application/json)

        {
            success: false,
            msg: 'Invalid email address.',
            name: 'tim',
            email:'tang.jilong@gmail.com'
        }        


+ Response Failure (application/json)

        {
            success: false,
            msg: 'Incomplete user info.',
            name: 'tim',
            email:'tang.jilong@gmail.com'
        }        

## User login [/user/login]
User login with username/passwod.

### Login [POST]
+ Request (application/json)

        {
            name: "tim",
            pass: "123",
        }

+ Response Success (application/json)

    + Header

            Cookie: hearthstone_srv=d77961ede0dc4c7e7fd5ada36c4b75f2d0017472f95cc772e7611740c52495c61b52ef8029d7b67af84f7f8ad573798077d74a 

    + Body

        { 
            deviceToken: 'abc123',
            avatar: 'http://www.gravatar.com/avatar/b2c120af3dd18a08a76b30089095acfd?size=48',
            email: 'tang.jilong@gmail.com',
            pass: 'd81f9c1be2e08964bf9f24b15f0e4900',
            name: 'MY4tZhE6',
            _id: '528b47249b5d2c1e2c000001',
            __v: 0,
            update_at: '2013-11-19T11:10:28.621Z' 
        }

+ Response Failure (application/json)

        {
            success: false,
            msg: 'Invalid username or password!',
            name: 'tim',
            pass: '123'
        }


+ Response Failure (application/json)

        {
            success: false,
            msg: 'User not exists!',
            name: 'tim',
            pass: '123'
        }


+ Response Failure (application/json)

        {
            success: false,
            msg: 'Bad password!',
            name: 'tim',
            pass: '123'
        }

## User update [/user/update]
Update user name (Auth token required! ).

### Update [PUT]
+ Request (application/json)

        {
            userId: "528c8fa4460ba8061b000002",
            name: "new username"
        }

+ Response Success (application/json)

    + Body

        { 
            success: true,
            msg: "Update user success!"
        }

+ Response Failure (application/json)

        {
            success: false,
            msg: "Update user failure."
        }

## User favorite [/user/favorite]
Update user name. (Auth token required!)

### Update [PUT]
+ Request (application/json)

        {
            cardId: "528c8fa4460ba8061b000002",
            userId: "528c8fa4460ba8061b000002"  # This can be empty for guest.
        }

+ Response Success (application/json)

    + Body

        { 
            success: true,
            msg: "Favorite card success!"
        }

+ Response Failure (application/json)

        {
            success: false,
            msg: "Favorite card failure."
        }

## Show User Info [/user/info/{name}]
Display user Information. (Auth token required!)

### Retrieve a User [GET]
+ Parameters
    + name (required, string, `tim`) ... String `name` of the User to perform action with. Has example value.

+ Request (application/json)

    + Header

        Cookie: hearthstone_srv=d77961ede0dc4c7e7fd5ada36c4b75f2d0017472f95cc772e7611740c52495c61b52ef8029d7b67af84f7f8ad573798077d74a 

+ Response 200 (application/json)

    + Body

        { 
            deviceToken: 'abc123',
            avatar: 'http://www.gravatar.com/avatar/b2c120af3dd18a08a76b30089095acfd?size=48',
            email: 'tang.jilong@gmail.com',
            pass: 'd81f9c1be2e08964bf9f24b15f0e4900',
            name: 'MY4tZhE6',
            _id: '528b47249b5d2c1e2c000001',
            __v: 0,
            update_at: '2013-11-19T11:10:28.621Z' 
        }

## Show Favorite Cards [/user/favorite/{userId}]
Display user favorite cards.(Auth token required!)

### Show User Favorite cards [GET]
+ Parameters
    + userId (required, string, `528c8fa4460ba8061b000002`) ... String `userId` of the User to perform action with. Has example value.

+ Request (application/json)

    + Header

        Cookie: hearthstone_srv=d77961ede0dc4c7e7fd5ada36c4b75f2d0017472f95cc772e7611740c52495c61b52ef8029d7b67af84f7f8ad573798077d74a 

+ Response 200 (application/json)

    + Body
    
        {
            success: true,
            cards: [CARD_JSON_OBJECT]
        }

+ Response Failure (application/json)

    + Body

        {
            success: false,
            msg: 'User not exists'
        }

## Logout User [/user/logout]
User logout

### Logout [GET]
+ Request (application/json)

    + Header

        Cookie: hearthstone_srv=d77961ede0dc4c7e7fd5ada36c4b75f2d0017472f95cc772e7611740c52495c61b52ef8029d7b67af84f7f8ad573798077d74a 

+ Response 200 (application/json)

        {
            success: true,
            msg: 'Logout success!'
        }

# Group Comment
Comment related resources of the **Comment API**


## Create Comment [/comment/create]
Create a comment on card.

### Create Comment[POST]
+ Request (application/json)

        {
            userId: "528c8fa4460ba8061b000002",
            cardId: "528c8fa4460ba8061b000002"
        }

+ Response Success (application/json)

        {
            success: true,
            comment: COMMENT_JSON_OBJECT
        }


+ Response Failure (application/json)

        {
            success: false,
            msg: 'Create comment failure!'
        }

## Get Card Comments [/comment/show/{cardId}]
Get Card related comments.

### Show User Favorite cards [GET]
+ Parameters
    + cardId(required, string, `528c8fa4460ba8061b000002`) ... String `cardId` of the User to perform action with. Has example value.

### Card Comments [GET]
+ Request (application/json)

+ Response 200 (application/json)

        {
            success: true,
            comments:[COMMENT_JSON_OBJECT]
        }

+ Response Failure (application/json)

        {
            success: false,
            msg: 'Get comments failure!'
        }

## Star Comment[/comment/star]
Star user comment. 

### Star [PUT]
+ Request (application/json)

        {
            commentId: "528c8fa4460ba8061b000002",
            star:  5
        }

+ Response Success (application/json)

    + Body

        { 
            success: true,
            msg: "Star comment success!"
        }

+ Response Failure (application/json)

        {
            success: false,
            msg: "Star comment failure."
        }

